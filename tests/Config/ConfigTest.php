<?php declare(strict_types = 1);

namespace Keboola\DockerApplication\Tests\Config;

use Keboola\DockerApplication\Config\Config;
use Keboola\DockerApplication\Config\ConfigDefinition;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends TestCase
{
    public function testWillCreateConfigFromArray(): void
    {
        $config = new Config([]);

        $this->assertInstanceOf(Config::class, $config);
    }

    public function testCanOverrideParametersDefinition(): void
    {
        $configDefinition = new class extends ConfigDefinition implements ConfigurationInterface
        {
            protected function getParametersDefinition(): ArrayNodeDefinition
            {
                $nodeDefinition = parent::getParametersDefinition();
                // @formatter:off
                $nodeDefinition->isRequired();
                $nodeDefinition
                    ->children()
                        ->scalarNode('requiredValue')
                            ->isRequired()
                            ->cannotBeEmpty();
                // @formatter:on
                return $nodeDefinition; // TODO: Change the autogenerated stub
            }
        };

        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage('The child node "requiredValue" at path "root.parameters" must be configured.');

        $config = new Config(['parameters' => []], $configDefinition);
    }

    public function testCanOverrideRootDefinition(): void
    {
        $configDefinition = new class extends ConfigDefinition implements ConfigurationInterface
        {
            protected function getRootDefinition(TreeBuilder $treeBuilder): ArrayNodeDefinition
            {
                $rootNode = parent::getRootDefinition($treeBuilder);
                $rootNode
                    ->children()
                    ->scalarNode('requiredRootNode')
                    ->isRequired()
                    ->cannotBeEmpty();
                return $rootNode;
            }
        };
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage('The child node "requiredRootNode" at path "root" must be configured.');

        $config = new Config([], $configDefinition);
    }

    public function testIsForwardCompatible(): void
    {
        $config = new Config(['yetNonexistentKey' => 'value']);
        $this->assertSame(['yetNonexistentKey' => 'value'], $config->getData());
    }
}
